# -*- coding: utf-8 -*-

import mastermind_engine as mm

print(
    '\n Правила:\n Компьютер загадывает четырехзначное число, все цифры которого различны\n (первая цифра числа отлична '
    'от нуля). Игроку необходимо разгадать задуманное число.\n Игрок вводит четырехзначное число c неповторяющимися '
    'цифрами,\n компьютер сообщают о количестве «быков» и «коров» в названном числе\n бык» — цифра есть в записи '
    'задуманного числа и стоит в той же позиции,\n что и в задуманном числе\n «корова» — цифра есть в записи '
    'задуманного числа, но не стоит в той же позиции,\n что и в задуманном числе \n Например, если задумано число 3275'
    ' и названо число 1234, \n получаем в названном числе одного «быка» и одну «корову». \n Очевидно, что число '
    'отгадано в том случае, если имеем 4 «быка». \n')

while True:
    mm.hidden_number = []
    mm.bulls = 0
    counts_try = 0
    mm.get_number()
    # print(mm.hidden_number)  # строка для теста

    while True:
        if mm.bulls == 4:
            print(f'\n    Вы выграли. Количество попыток - {counts_try}')
            break

        guess = input('Введите четырехзначное число: ')

        if not guess.isnumeric():
            print('\n    Ошибка!!! Вы ввели не только числа !!! \n')
        else:
            guess_number = []
            for i in range(len(guess)):
                guess_number.append(int(guess[i]))

            if len(set(guess_number)) != 4:
                print('\n    Ошибка!!! Введите четырехзначное число. Все числа разные. \n')
                continue

            mm.check_number(guess_number=guess_number)
            counts_try += 1

    continuation = input('\n    Хотите еще партию? Введите "Да" ')
    if continuation != 'Да' and continuation != 'да':
        break

# Составить отдельный модуль mastermind_engine, реализующий функциональность игры.
# В этом модуле нужно реализовать функции:
#   загадать_число()
#   проверить_число(NN) - возвращает словарь {'bulls': N, 'cows': N}
# Загаданное число хранить в глобальной переменной.
# Обратите внимание, что строки - это список символов.
#
# В текущем модуле (lesson_006/01_mastermind.py) реализовать логику работы с пользователем:
#   модуль движка загадывает число
#   в цикле, пока число не отгадано
#       у пользователя запрашивается вариант числа
#       модуль движка проверяет число и выдает быков/коров
#       результат быков/коров выводится на консоль
#  когда игрок угадал таки число - показать количество ходов и вопрос "Хотите еще партию?"
#
# При написании кода учитывайте, что движок игры никак не должен взаимодействовать с пользователем.
# Все общение с пользователем делать в текущем модуле. Представьте, что движок игры могут использовать
# разные клиенты - веб, чатбот, приложение, етс - они знают как спрашивать и отвечать пользователю.
# Движок игры реализует только саму функциональность игры.
# Это пример применения SOLID принципа (см https://goo.gl/GFMoaI) в архитектуре программ.
# Точнее, в этом случае важен принцип единственной ответственности - https://goo.gl/rYb3hT

